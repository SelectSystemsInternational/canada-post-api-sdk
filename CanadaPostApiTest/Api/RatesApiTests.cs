/* 
 * Canada Post Api
 *
 * Api SDK Initial build
 *
 * REST XML Spec version: 2022-05-30
 * 
 * Generated by: https://www.selectsystems.com.au/
 */

using System;

using NUnit.Framework;

using CanadaPostApi.Api;

namespace CanadaPostApi.Test
{
    /// <summary>
    ///  Class for testing CheckoutsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RatesApiTests
    {
        private AuthorizationApi authorizationApi;
        private RatesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            string useragent = "nopCommerce Canada Post Api; .NetStandard 2.1;";

            // Sandbox
            authorizationApi = new AuthorizationApi("https://ct.soa-gw.canadapost.ca", useragent);

            authorizationApi.Configuration.Username = "6e93d53968881714";
            authorizationApi.Configuration.Password = "0bfa9fcb9853d1f51ee57a";
            authorizationApi.Configuration.CustomerNumber = "2004381";
            authorizationApi.Configuration.Account = "2004381";

            var response = authorizationApi.AuthorizationCreateConfiguration();

            instance = new RatesApi(authorizationApi.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CheckoutsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RatesApi
            Assert.IsInstanceOf(typeof(RatesApi), instance, "instance is a RatesApi");
        }

        /// <summary>
        /// Test Discover Services
        /// </summary>
        [Test]
        public void DiscoverServices()
        {
            string responseAsString = String.Empty;

            //get available services
            var availableServices = instance.GetServices(null, out string errors);
            if (availableServices != null)
            {
                // Retrieve values from services object
                foreach (var service in availableServices.service)
                {
                    responseAsString += "Service Name: " + service.servicename + "\r\n";
                    responseAsString += "Service Code: " + service.servicecode + "\r\n";
                    responseAsString += "Href: " + service.link.href + "\r\n\r\n";
                }
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Test Get Services
        /// </summary>
        [Test]
        public void GetServiceRates()
        {
            string responseAsString = String.Empty;

            //get available services
            var availableServices = instance.GetServices("CA", out string errors);
            if (availableServices != null)
            {
                //get rate for selected services

                var selectedServices = availableServices.service;
                foreach (var service in selectedServices)
                {
                    var currentService = instance.GetServiceDetails(service.link.href, service.link.mediatype, out errors);
                    if (currentService != null)
                    {

                        responseAsString += "Service Name: " + service.servicename + "\r\n";
                        responseAsString += "Service Code: " + service.servicecode + "\r\n";
                        responseAsString += "Href: " + service.link.href + "\r\n\r\n";

                        var restrictions = currentService.restrictions;

                        // Create mailingScenario object to contain xml request
                        mailingscenario mailingScenario = new mailingscenario();
                        mailingScenario.parcelcharacteristics = new mailingscenarioParcelcharacteristics();
                        mailingScenario.destination = new mailingscenarioDestination();
                        mailingscenarioDestinationDomestic destDom = new mailingscenarioDestinationDomestic();
                        mailingScenario.destination.Item = destDom;

                        // Populate mailingScenario object
                        mailingScenario.customernumber = instance.Configuration.CustomerNumber;
                        mailingScenario.parcelcharacteristics.weight = 1;
                        mailingScenario.originpostalcode = "K2B8J6";
                        destDom.postalcode = "J0E1X0";

                        mailingScenario.services = new[] { currentService.servicecode };

                        var priceQuotes = instance.GetRates(mailingScenario, out errors);
                        if (priceQuotes != null)
                        {
                            foreach (var priceQuote in priceQuotes.pricequote)
                            {
                                responseAsString += "Service Name: " + priceQuote.servicename + "\r\n";
                                responseAsString += "Price Name: $" + priceQuote.pricedetails.due + "\r\n\r\n";
                                responseAsString += "Expected Transit Time: " + priceQuote.servicestandard.expectedtransittime + "\r\n\r\n";
                            }
                        }
                    }
                }
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }
    }
}
