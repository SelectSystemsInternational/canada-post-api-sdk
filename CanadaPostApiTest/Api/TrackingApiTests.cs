/* 
 * Canada Post Api
 *
 * Api SDK Initial build
 *
 * REST XML Spec version: 2022-05-30
 * 
 * Generated by: https://www.selectsystems.com.au/
 */

using System;
using System.IO;

using NUnit.Framework;

using CanadaPostApi.Api;

namespace CanadaPostApi.Test
{
    /// <summary>
    ///  Class for testing CheckoutsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TrackingApiTests
    {
        private AuthorizationApi authorizationApi;
        private TrackingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            string useragent = "nopCommerce Canada Post Api; .NetStandard 2.1;";

            // Sandbox
            authorizationApi = new AuthorizationApi("https://ct.soa-gw.canadapost.ca", useragent);

            authorizationApi.Configuration.Username = "6e93d53968881714";
            authorizationApi.Configuration.Password = "0bfa9fcb9853d1f51ee57a";
            authorizationApi.Configuration.CustomerNumber = "2004381";
            authorizationApi.Configuration.Account = "2004381";

            var response = authorizationApi.AuthorizationCreateConfiguration();

            instance = new TrackingApi(authorizationApi.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CheckoutsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TrackingApi
            Assert.IsInstanceOf(typeof(TrackingApi), instance, "instance is a TrackingApi");
        }

        /// <summary>
        /// Test tracking details
        /// </summary>
        [Test]
        public void GetTrackingDetails()
        {
            string responseAsString = String.Empty;

            //get available services
            var trackingDetail = instance.GetTrackingDetails("1371134583769923", out string errors);
            if (trackingDetail != null)
            {
                // Retrieve values from trackingdetail object
                responseAsString += "PIN Number: " + trackingDetail.pin + "\r\n";
                responseAsString += "Signature Exists: " + trackingDetail.signatureimageexists + "\r\n";
                responseAsString += "Suppress Signature: " + trackingDetail.suppresssignature + "\r\n";
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Test tracking summary
        /// </summary>
        [Test]
        public void GetTrackingSummary()
        {
            string responseAsString = String.Empty;

            //get available services
            var trackingSummary = instance.GetTrackingSummary("K2H7X3", "DIA101", "2022-05-01", "2022-06-01", out string errors);
            if (trackingSummary != null)
            {
                // Retrieve values from trackingsummary object
                foreach (var pinSummary in trackingSummary.pinsummary)
                {
                    responseAsString += "PIN Number: " + pinSummary.pin + "\r\n";
                    responseAsString += "Mailed On Date: " + pinSummary.mailedondate + "\r\n";
                    responseAsString += "Event Description: " + pinSummary.eventdescription + "\r\n\r\n";
                }
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Test delivery confirmation certificate
        /// </summary>
        [Test]
        public void GetDeliveryConfirmationCertificate()
        {
            string responseAsString = String.Empty;

            //get available services
            var certifcate = instance.GetDeliveryConfirmationCertificate("1371134583769923", out string errors);
            if (certifcate != null)
            {
                // Retrieve values from deliveryconfirmationcertificate object
                var fileName = certifcate.filename;
                var encodedImage = certifcate.image;
                responseAsString += "File name: " + fileName + "\r\n";
                responseAsString += "Mime type: " + certifcate.mimetype + "\r\n";
                byte[] decodedImage = Convert.FromBase64String(encodedImage);
                FileStream fileStream = File.Create(fileName);
                fileStream.Write(decodedImage, 0, decodedImage.Length);
                responseAsString += "Decoding to " + Directory.GetCurrentDirectory() + "\\" + fileName + "\r\n";
                fileStream.Close();
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Test delivery confirmation certificate
        /// </summary>
        [Test]
        public void GetSignatureImage()
        {
            string responseAsString = String.Empty;

            //get available services
            var signature = instance.GetSignatureImage("1371134583769923", out string errors);
            if (signature != null)
            {
                // Retrieve values from signatureimage object
                var fileName = signature.filename;
                var encodedImage = signature.image;
                responseAsString += "File name: " + fileName + "\r\n";
                responseAsString += "Mime type: " + signature.mimetype + "\r\n";
                byte[] decodedImage = Convert.FromBase64String(encodedImage);
                FileStream fileStream = File.Create(fileName);
                fileStream.Write(decodedImage, 0, decodedImage.Length);
                responseAsString += "Decoding to " + Directory.GetCurrentDirectory() + "\\" + fileName + "\r\n";
                fileStream.Close();
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }
    }
}
