/* 
 * Canada Post Api
 *
 * Api SDK Initial build
 *
 * REST XML Spec version: 2022-05-30
 * 
 * Generated by: https://www.selectsystems.com.au/
 */

using System;
using System.IO;
using System.Linq;

using NUnit.Framework;

using CanadaPostApi.Api;

namespace CanadaPostApi.Test
{
    /// <summary>
    ///  Class for testing CheckoutsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ShippingApiTests
    {
        private AuthorizationApi authorizationApi;
        private ShippingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            string useragent = "nopCommerce Canada Post Api; .NetStandard 2.1;";

            // Sandbox
            authorizationApi = new AuthorizationApi("https://ct.soa-gw.canadapost.ca", useragent);

            authorizationApi.Configuration.Username = "6e93d53968881714";
            authorizationApi.Configuration.Password = "0bfa9fcb9853d1f51ee57a";
            authorizationApi.Configuration.CustomerNumber = "2004381";
            authorizationApi.Configuration.Account = "2004381";

            var response = authorizationApi.AuthorizationCreateConfiguration();

            instance = new ShippingApi(authorizationApi.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CheckoutsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RatesApi
            Assert.IsInstanceOf(typeof(ShippingApi), instance, "instance is a ShippingApi");
        }

        /// <summary>
        /// Create Shipment
        /// </summary>
        /// <returns>ShipmentInfoType</returns>
        /// <returns>aftifactUrl</returns>
        /// <returns>ManifestsType</returns>
        public (ShipmentInfoType, string, string) CreateShipment()
        {
            string responseAsString = String.Empty;
            string aftifactUrl = String.Empty;

            // Create shipment object to contain xml request
            ShipmentType shipment = new ShipmentType();
            shipment.deliveryspec = new DeliverySpecType();
            shipment.deliveryspec.sender = new SenderType();
            shipment.deliveryspec.sender.addressdetails = new AddressDetailsType();
            shipment.deliveryspec.destination = new DestinationType();
            shipment.deliveryspec.destination.addressdetails = new DestinationAddressDetailsType();
            shipment.deliveryspec.options = new OptionType[1];
            shipment.deliveryspec.options[0] = new OptionType();
            shipment.deliveryspec.parcelcharacteristics = new ParcelCharacteristicsType();
            shipment.deliveryspec.parcelcharacteristics.dimensions = new ParcelCharacteristicsTypeDimensions();
            shipment.deliveryspec.notification = new NotificationType();
            shipment.deliveryspec.printpreferences = new PrintPreferencesType();
            shipment.deliveryspec.preferences = new PreferencesType();
            shipment.deliveryspec.settlementinfo = new SettlementInfoType();
            shipment.deliveryspec.references = new ReferencesType();

            // Populate shipment object - group ?
            //1. regular shipment
            shipment.Item = "Group1";

            //2. no manifest shipment
            //shipment.Item = true;

            //3. Payment and contract options 
            //shipment.deliveryspec.settlementinfo.intendedmethodofpayment = "CreditCard";
            shipment.deliveryspec.settlementinfo.intendedmethodofpayment = "Account";
            shipment.deliveryspec.settlementinfo.contractid = "42708517"; // Sandbox Test

            shipment.requestedshippingpoint = "K1K4T3";
            shipment.cpcpickupindicator = true;
            shipment.cpcpickupindicatorSpecified = true;

            shipment.expectedmailingdate = new DateTime(2022, 06, 30);
            shipment.expectedmailingdateSpecified = true;

            shipment.deliveryspec.sender.name = "Bulma";
            shipment.deliveryspec.sender.company = "Capsule Corp.";
            shipment.deliveryspec.sender.addressdetails.addressline1 = "502 MAIN ST N";
            shipment.deliveryspec.sender.addressdetails.city = "MONTREAL";
            shipment.deliveryspec.sender.addressdetails.provstate = "QC";
            shipment.deliveryspec.sender.addressdetails.countrycode = "CA";
            shipment.deliveryspec.sender.addressdetails.postalzipcode = "H2B1A0";
            shipment.deliveryspec.sender.contactphone = "1 (514) 820 5879";

            shipment.deliveryspec.destination.name = "John Doe";
            shipment.deliveryspec.destination.company = "ACME Corp.";
            shipment.deliveryspec.destination.addressdetails.addressline1 = "123 Postal Drive";
            shipment.deliveryspec.destination.addressdetails.city = "Ottawa";
            shipment.deliveryspec.destination.addressdetails.provstate = "ON";
            shipment.deliveryspec.destination.addressdetails.countrycode = "CA";
            shipment.deliveryspec.destination.addressdetails.postalzipcode = "K1P5Z9";

            shipment.deliveryspec.options[0].optioncode = "DC";
            shipment.deliveryspec.parcelcharacteristics.dimensions.height = 6;
            shipment.deliveryspec.parcelcharacteristics.dimensions.length = 12;
            shipment.deliveryspec.parcelcharacteristics.dimensions.width = 9;
            shipment.deliveryspec.parcelcharacteristics.weight = 5;

            shipment.deliveryspec.notification.email = "ryuko.saito@kubere.com";
            shipment.deliveryspec.notification.ondelivery = true;
            shipment.deliveryspec.notification.onexception = false;
            shipment.deliveryspec.notification.onshipment = true;

            shipment.deliveryspec.printpreferences.outputformat = PrintPreferencesTypeOutputformat.Item85x11;
            shipment.deliveryspec.printpreferences.outputformatSpecified = true;
            shipment.deliveryspec.preferences.showinsuredvalue = true;
            shipment.deliveryspec.preferences.showpackinginstructions = true;
            shipment.deliveryspec.preferences.showpostagerate = true;

            shipment.deliveryspec.references.costcentre = "costcentre";
            shipment.deliveryspec.references.customerref1 = "customerref1";
            shipment.deliveryspec.references.customerref2 = "customerref2";
            shipment.deliveryspec.servicecode = "DOM.EP";

            // Retrieve values from shipmentInfo object
            var shipmentInfo = instance.CreateShipment(shipment, out string errors);
            if (shipmentInfo != null)
            {
                // Retrieve values from shipmentInfo object
                responseAsString += "Shipment ID: " + shipmentInfo.shipmentid + "\r\n";
                foreach (LinkType link in shipmentInfo.links)
                {
                    responseAsString += link.rel + ":  " + link.href + "\r\n";
                    if (link.rel == "label")
                        aftifactUrl = link.href;
                }
            }

            return (shipmentInfo, aftifactUrl, responseAsString);

        }

        /// <summary>
        /// Get shipment aftifact
        /// </summary>
        [Test]
        public void TestCreateShipment()
        {
            string responseAsString = string.Empty;
            string aftifactUrl = string.Empty;
            string errors = string.Empty;
            ShipmentInfoType shipmentInfo;

            string shipmentId = string.Empty;

            (shipmentInfo, aftifactUrl, responseAsString) = CreateShipment();

            if (!string.IsNullOrEmpty(shipmentId))
                shipmentId = shipmentInfo.shipmentid; //"446271653851556452";

            // Get Shipment 
            if (!string.IsNullOrEmpty(shipmentId))
            {

                // Retrieve values from customer object
                shipmentInfo = instance.GetShipment(shipmentId, out errors);
                if (shipmentInfo != null)
                {
                    // Retrieve values from ShipmentInfoType object
                    responseAsString += "Shipment ID: " + shipmentInfo.shipmentid + "\r\n";
                    foreach (LinkType link in shipmentInfo.links)
                    {
                        responseAsString += link.rel + ":  " + link.href + "\r\n";
                    }
                }
            }

            // Get Shipment Artifact
            if (!string.IsNullOrEmpty(aftifactUrl))
            {

                // Retrieve values from customer object
                var response = instance.GetShipmentAftifact(aftifactUrl, out errors);
                if (response != null)
                {

                    responseAsString += "HTTP Response Status: " + (int)response.StatusCode + "\r\n\r\n";

                    // Write Artifact to file
                    var mediaStr = response.ContentType;

                    String fileName = "shipmentArtifact.pdf";
                    if (mediaStr.Equals("application/zpl"))
                    {
                        fileName = "shipmentArtifact.zpl";
                    }

                    FileStream fileStream = File.Create(fileName);

                    // Create a 4K buffer to chunk the file  
                    byte[] buffer = new byte[4096];

                    int BytesRead;
                    responseAsString += "Writing response to " + Directory.GetCurrentDirectory() + "\\" + fileName + "\r\n";
                    // Read the chunk of the web response into the buffer
                    while (0 < (BytesRead = response.GetResponseStream().Read(buffer, 0, buffer.Length)))
                    {
                        // Write the chunk from the buffer to the file  
                        fileStream.Write(buffer, 0, BytesRead);
                    }

                    fileStream.Close();
                }

            }

            // Get Shipment Details
            if (!string.IsNullOrEmpty(shipmentId))
            {
                var shipmentDetails = instance.GetShipmentDetails(shipmentId, out errors);

                // Retrieve values from ShipmentDetailsType object
                responseAsString += "Tracking Pin: " + shipmentDetails.trackingpin + "\r\n";
                if (!shipmentDetails.shipmentdetail.Item.Equals(true))
                {
                    responseAsString += "Group Id: " + shipmentDetails.shipmentdetail.Item + "\r\n";
                }
                else
                {
                    responseAsString += "Transmit Shipment: " + shipmentDetails.shipmentdetail.Item + "\r\n";
                }
                responseAsString += "Sender Postal Code: " + shipmentDetails.shipmentdetail.deliveryspec.sender.addressdetails.postalzipcode + "\r\n";
                responseAsString += "Destination Postal Code: " + shipmentDetails.shipmentdetail.deliveryspec.destination.addressdetails.postalzipcode + "\r\n";


                var shipmentPrice = instance.GetShipmentDetailsInformation<ShipmentPriceType>(shipmentId, "price", out errors);

                // Retrieve values from ShipmentPriceType object
                responseAsString += "Service Code: " + shipmentPrice.servicecode + "\r\n";
                responseAsString += "Due amount: " + shipmentPrice.dueamount + "\r\n";
            }

            // Get Shipment Receipt
            if (!string.IsNullOrEmpty(shipmentId))
            {
                var shipmentReceipt = instance.GetShipmentDetailsInformation<ShipmentReceiptType>(shipmentId, "receipt", out errors);

                if (shipmentReceipt != null)
                {
                    // Retrieve values from ShipmentReceiptType object
                    if (shipmentReceipt.Item.GetType() == typeof(ShipmentReceiptTypeCcreceiptdetails))
                    {
                        ShipmentReceiptTypeCcreceiptdetails receiptDetails = (ShipmentReceiptTypeCcreceiptdetails)shipmentReceipt.Item;
                        responseAsString += "Auth Code: " + receiptDetails.authcode + "\r\n";
                        responseAsString += "Auth Timestamp: " + receiptDetails.authtimestamp + "\r\n";
                        responseAsString += "Charge Amount: " + receiptDetails.chargeamount + "\r\n";
                        responseAsString += "Currency: " + receiptDetails.currency + "\r\n";
                        responseAsString += "Merchant Name: " + receiptDetails.merchantname + "\r\n";
                        responseAsString += "Merchant URL: " + receiptDetails.merchanturl + "\r\n";
                        responseAsString += "Name on Card: " + receiptDetails.nameoncard + "\r\n";
                        responseAsString += "Card Type: " + receiptDetails.cardtype + "\r\n";
                        responseAsString += "Transaction Type: " + receiptDetails.transactiontype + "\r\n";
                    }
                    else
                    {
                        ShipmentReceiptTypeSupplieraccountreceiptdetails receiptDetails = (ShipmentReceiptTypeSupplieraccountreceiptdetails)shipmentReceipt.Item;
                        responseAsString += "Auth Code: " + receiptDetails.authcode + "\r\n";
                        responseAsString += "Auth Timestamp: " + receiptDetails.authtimestamp + "\r\n";
                        responseAsString += "Charge Amount: " + receiptDetails.chargeamount + "\r\n";
                        responseAsString += "Currency: " + receiptDetails.currency + "\r\n";
                        responseAsString += "Merchant Name: " + receiptDetails.merchantname + "\r\n";
                        responseAsString += "Merchant URL: " + receiptDetails.merchanturl + "\r\n";
                        responseAsString += "Supplier Id: " + receiptDetails.supplierid + "\r\n";
                        responseAsString += "Transaction Type: " + receiptDetails.transactiontype + "\r\n";
                    }
                }
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Get shipment groups
        /// </summary>
        [Test]
        public void TestGetGroups()
        {
            string responseAsString = string.Empty;
            string aftifactUrl = string.Empty;
            string errors = string.Empty;

            var groups = instance.GetGroups(out errors);
            // Retrieve values from GroupType object
            if (groups != null && groups.group != null)
            {
                var groupList = groups.group.Where(x => x.groupid.Contains("GROUP1"));
                foreach (var group in groupList)
                {
                    responseAsString += group.link.rel + ":  " + group.link.href + "\r\n";
                }
            }
            else
            {
                responseAsString += "No groups returned.\r\n";
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Get shipment groups
        /// </summary>
        [Test]
        public void TestTransmitShipment()
        {
            string responseAsString = string.Empty;

            // Create transmit object to contain xml request
            ShipmentTransmitSetType transmit = new ShipmentTransmitSetType();
            transmit.groupids = new String[1];
            transmit.manifestaddress = new ManifestAddressType();
            transmit.manifestaddress.addressdetails = new ManifestAddressDetailsType();

            // Populate transmit object
            transmit.groupids[0] = "GROUP1";
            transmit.requestedshippingpoint = "K1K4T3";
            transmit.cpcpickupindicator = true;
            transmit.cpcpickupindicatorSpecified = true;
            transmit.detailedmanifests = true;
            transmit.methodofpayment = "Account";
            transmit.manifestaddress.manifestcompany = "MajorShop";
            transmit.manifestaddress.phonenumber = "514 829 5879";
            transmit.manifestaddress.addressdetails.addressline1 = "1230 Tako RD.";
            transmit.manifestaddress.addressdetails.city = "Ottawa";
            transmit.manifestaddress.addressdetails.provstate = "ON";
            transmit.manifestaddress.addressdetails.postalzipcode = "K2B8J6";

            // Retrieve values from shipmentInfo object
            var manifests = instance.TransmitShipments(transmit, out string errors);
            if (manifests != null)
            {
                // Retrieve values from manifests object
                foreach (LinkType link in manifests.link)
                {
                    responseAsString += link.rel + ":  " + link.href + "\r\n";
                }
            }
            else
            {
                responseAsString += errors;
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");

        }

        /// <summary>
        /// Get shipment groups
        /// </summary>
        [Test]
        public void TestGetManifests()
        {
            string responseAsString = string.Empty;
            string aftifactUrl = string.Empty;
            string errors = string.Empty;

            var manifests = instance.GetManifests("20220529", "20220530", out errors);
            if (manifests != null)
            {
                // Retrieve values from ManifestsType object
                if (manifests.link != null)
                {
                    foreach (LinkType link in manifests.link)
                    {
                        responseAsString += link.rel + ":  " + link.href + "\r\n";
                    }
                }
                else
                {
                    responseAsString += "No manifests returned.\r\n";
                }
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Get Manifest
        /// </summary>
        /// <param name="manifestId">manifest identifier</param>
        /// <param name="manifestUrl">manifestUrl</param>
        /// <returns>ManifestsType</returns>
        /// <returns>aftifactUrl</returns>
        /// <returns>Errors</returns> 
        public (ManifestType, string, string) GetManifest(string manifestId, string url)
        {
            string responseAsString = string.Empty;
            string aftifactUrl = string.Empty;
            string errors = string.Empty;

            var manifest = instance.GetManifest(manifestId, url, out errors);
            if (manifest != null)
            {
                // Retrieve values from ManifestType object
                responseAsString += "PO Number: " + manifest.ponumber + "\r\n";
                foreach (LinkType link in manifest.links)
                {
                    responseAsString += link.rel + ":  " + link.href + "\r\n";
                    if (link.rel == "artifact")
                        aftifactUrl = link.href;
                }
            }

            return (manifest, aftifactUrl, errors);

        }

        /// <summary>
        /// Get shipment groups
        /// </summary>
        [Test]
        public void TestGetAftifactManifest()
        {
            string responseAsString = string.Empty;
            string aftifactUrl = string.Empty;
            string errors = string.Empty;
            ManifestType manifest;

            (manifest, aftifactUrl, errors) = GetManifest("446271653880546436", null);
            if (manifest != null)
            {

                var response = instance.GetManifestArtifact(aftifactUrl, out errors);
                if (response != null)
                {

                    // Write Artifact to file
                    var mediaStr = response.ContentType;

                    String fileName = "manifestArtifact.pdf";
                    FileStream fileStream = File.Create(fileName);

                    // Create a 4K buffer to chunk the file  
                    byte[] buffer = new byte[4096];

                    int BytesRead;
                    responseAsString += "Writing response to " + Directory.GetCurrentDirectory() + "\\" + fileName + "\r\n";
                    // Read the chunk of the web response into the buffer
                    while (0 < (BytesRead = response.GetResponseStream().Read(buffer, 0, buffer.Length)))
                    {
                        // Write the chunk from the buffer to the file  
                        fileStream.Write(buffer, 0, BytesRead);
                    }
                    fileStream.Close();
                }
                else
                {
                    responseAsString += "Noaftifact found" + "\r\n";
                }
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Get shipment aftifact
        /// </summary>
        [Test]
        public void TestRequestShipmentRefund()
        {
            string responseAsString = string.Empty;
            string aftifactUrl = string.Empty;
            string errors = string.Empty;

            string shipmentId = "446271653880546436";

            // Create shipment object to contain xml request
            ShipmentRefundRequestType shipmentRefundRequest = new ShipmentRefundRequestType();
            shipmentRefundRequest.email = "user@host.com";

            var shipmentRefundRequestInfo = instance.RequestShipmentRefund(shipmentId, shipmentRefundRequest, out errors);
            if (shipmentRefundRequestInfo != null)
            {
                // Retrieve values from shipmentRefundRequestInfo object
                responseAsString += "Service Ticket ID: " + shipmentRefundRequestInfo.serviceticketid + "\r\n";
                responseAsString += "Service Ticket Date: " + shipmentRefundRequestInfo.serviceticketdate + "\r\n";
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Get shipment aftifact
        /// </summary>
        [Test]
        public void TestVoidShipment()
        {
            string responseAsString = string.Empty;
            string aftifactUrl = string.Empty;
            string errors = string.Empty;

            string shipmentId = "446271653880546436";

            var response = instance.VoidShipment(shipmentId, out errors);
            if (response != null)
            {
                if ((int)response.StatusCode == 204)
                {
                    responseAsString += "Shipment successfully deleted.\r\n";
                }
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

        /// <summary>
        /// Get shipment aftifact
        /// </summary>
        [Test]
        public void TestCreateShipmentFullProcess()
        {
            string responseAsString = string.Empty;
            string aftifactUrl = string.Empty;
            string manifestUrl = string.Empty;
            string errors = string.Empty;
            ShipmentInfoType shipmentInfo = null;
            ManifestType manifest = null;

            string shipmentId = string.Empty;

            (shipmentInfo, aftifactUrl, responseAsString) = CreateShipment();

            //shipmentId = "685511653895303118";

            if (shipmentInfo != null || shipmentId != string.Empty)
            {
                if (shipmentId == string.Empty)
                    shipmentId = shipmentInfo.shipmentid;

                // Get Shipment 
                if (!string.IsNullOrEmpty(shipmentId))
                {

                    // Retrieve values from customer object
                    shipmentInfo = instance.GetShipment(shipmentId, out errors);
                    if (shipmentInfo != null)
                    {
                        // Retrieve values from ShipmentInfoType object
                        responseAsString += "\r\nShipment ID: " + shipmentInfo.shipmentid + "\r\n";
                        foreach (LinkType link in shipmentInfo.links)
                        {
                            responseAsString += link.rel + ":  " + link.href + "\r\n";
                        }
                    }
                }

                if (false) // Set to true to test void and delete the shipment
                {
                    // Void shipment

                    var response = instance.VoidShipment(shipmentId, out errors);
                    if (response != null)
                    {
                        if ((int)response.StatusCode == 204)
                        {
                            responseAsString += "\r\nShipment successfully deleted.\r\n";
                        }
                    }
                }
                else
                {
                    // Continue to process shipment 

                    // Get Shipment Artifact
                    if (!string.IsNullOrEmpty(aftifactUrl))
                    {

                        // Retrieve values from customer object
                        var response = instance.GetShipmentAftifact(aftifactUrl, out errors);
                        if (response != null)
                        {

                            responseAsString += "HTTP Response Status: " + (int)response.StatusCode + "\r\n\r\n";

                            // Write Artifact to file
                            var mediaStr = response.ContentType;

                            String fileName = "shipmentArtifact.pdf";
                            if (mediaStr.Equals("application/zpl"))
                            {
                                fileName = "shipmentArtifact.zpl";
                            }

                            FileStream fileStream = File.Create(fileName);

                            // Create a 4K buffer to chunk the file  
                            byte[] buffer = new byte[4096];

                            int BytesRead;
                            responseAsString += "Writing response to " + Directory.GetCurrentDirectory() + "\\" + fileName + "\r\n";
                            // Read the chunk of the web response into the buffer
                            while (0 < (BytesRead = response.GetResponseStream().Read(buffer, 0, buffer.Length)))
                            {
                                // Write the chunk from the buffer to the file  
                                fileStream.Write(buffer, 0, BytesRead);
                            }

                            fileStream.Close();
                        }

                    }

                    // Get Shipment Details
                    if (!string.IsNullOrEmpty(shipmentId))
                    {
                        var shipmentDetails = instance.GetShipmentDetails(shipmentId, out errors);

                        // Retrieve values from ShipmentDetailsType object
                        responseAsString += "\r\nTracking Pin: " + shipmentDetails.trackingpin + "\r\n";
                        if (!shipmentDetails.shipmentdetail.Item.Equals(true))
                        {
                            responseAsString += "Group Id: " + shipmentDetails.shipmentdetail.Item + "\r\n";
                        }
                        else
                        {
                            responseAsString += "Transmit Shipment: " + shipmentDetails.shipmentdetail.Item + "\r\n";
                        }
                        responseAsString += "Sender Postal Code: " + shipmentDetails.shipmentdetail.deliveryspec.sender.addressdetails.postalzipcode + "\r\n";
                        responseAsString += "Destination Postal Code: " + shipmentDetails.shipmentdetail.deliveryspec.destination.addressdetails.postalzipcode + "\r\n";


                        var shipmentPrice = instance.GetShipmentDetailsInformation<ShipmentPriceType>(shipmentId, "price", out errors);

                        // Retrieve values from ShipmentPriceType object
                        responseAsString += "Service Code: " + shipmentPrice.servicecode + "\r\n";
                        responseAsString += "Due amount: " + shipmentPrice.dueamount + "\r\n\r\n";
                    }

                    // Get Transmit Shipment
                    if (!string.IsNullOrEmpty(shipmentId))
                    {
                        // Create transmit object to contain xml request
                        ShipmentTransmitSetType transmit = new ShipmentTransmitSetType();
                        transmit.groupids = new String[1];
                        transmit.manifestaddress = new ManifestAddressType();
                        transmit.manifestaddress.addressdetails = new ManifestAddressDetailsType();

                        // Populate transmit object
                        transmit.groupids[0] = "GROUP1";
                        transmit.requestedshippingpoint = "K1K4T3";
                        transmit.cpcpickupindicator = true;
                        transmit.cpcpickupindicatorSpecified = true;
                        transmit.detailedmanifests = true;
                        transmit.methodofpayment = "Account";
                        transmit.manifestaddress.manifestcompany = "MajorShop";
                        transmit.manifestaddress.phonenumber = "514 829 5879";
                        transmit.manifestaddress.addressdetails.addressline1 = "1230 Tako RD.";
                        transmit.manifestaddress.addressdetails.city = "Ottawa";
                        transmit.manifestaddress.addressdetails.provstate = "ON";
                        transmit.manifestaddress.addressdetails.postalzipcode = "K2B8J6";

                        // Retrieve values from shipmentInfo object
                        var manifests = instance.TransmitShipments(transmit, out errors);
                        if (manifests != null)
                        {
                            // Retrieve values from manifests object
                            foreach (LinkType link in manifests.link)
                            {
                                responseAsString += link.rel + ":  " + link.href + "\r\n";
                                if (link.rel == "manifest")
                                    manifestUrl = link.href;
                            }
                        }
                        else
                        {
                            responseAsString += errors;
                        }
                    }

                    // Get Manifest and Manifest Aftifact
                    if (!string.IsNullOrEmpty(manifestUrl))
                    {
                        (manifest, aftifactUrl, errors) = GetManifest(null, manifestUrl);
                        if (manifest != null)
                        {

                            var response = instance.GetManifestArtifact(aftifactUrl, out errors);
                            if (response != null)
                            {

                                // Write Artifact to file
                                var mediaStr = response.ContentType;

                                String fileName = "manifestArtifact.pdf";
                                FileStream fileStream = File.Create(fileName);

                                // Create a 4K buffer to chunk the file  
                                byte[] buffer = new byte[4096];

                                int BytesRead;
                                responseAsString += "\r\nWriting response to " + Directory.GetCurrentDirectory() + "\\" + fileName + "\r\n";
                                // Read the chunk of the web response into the buffer
                                while (0 < (BytesRead = response.GetResponseStream().Read(buffer, 0, buffer.Length)))
                                {
                                    // Write the chunk from the buffer to the file  
                                    fileStream.Write(buffer, 0, BytesRead);
                                }
                                fileStream.Close();
                            }
                            else
                            {
                                responseAsString += "Noaftifact found" + "\r\n";
                            }
                        }
                    }

                    // Get Shipment Receipt
                    if (!string.IsNullOrEmpty(shipmentId) && shipmentInfo.shipmentreceipt != null)
                    {
                        var shipmentReceipt = instance.GetShipmentDetailsInformation<ShipmentReceiptType>(shipmentId, "receipt", out errors);

                        if (shipmentReceipt != null)
                        {
                            // Retrieve values from ShipmentReceiptType object
                            if (shipmentReceipt.Item.GetType() == typeof(ShipmentReceiptTypeCcreceiptdetails))
                            {
                                ShipmentReceiptTypeCcreceiptdetails receiptDetails = (ShipmentReceiptTypeCcreceiptdetails)shipmentReceipt.Item;
                                responseAsString += "Auth Code: " + receiptDetails.authcode + "\r\n";
                                responseAsString += "Auth Timestamp: " + receiptDetails.authtimestamp + "\r\n";
                                responseAsString += "Charge Amount: " + receiptDetails.chargeamount + "\r\n";
                                responseAsString += "Currency: " + receiptDetails.currency + "\r\n";
                                responseAsString += "Merchant Name: " + receiptDetails.merchantname + "\r\n";
                                responseAsString += "Merchant URL: " + receiptDetails.merchanturl + "\r\n";
                                responseAsString += "Name on Card: " + receiptDetails.nameoncard + "\r\n";
                                responseAsString += "Card Type: " + receiptDetails.cardtype + "\r\n";
                                responseAsString += "Transaction Type: " + receiptDetails.transactiontype + "\r\n";
                            }
                            else
                            {
                                ShipmentReceiptTypeSupplieraccountreceiptdetails receiptDetails = (ShipmentReceiptTypeSupplieraccountreceiptdetails)shipmentReceipt.Item;
                                responseAsString += "Auth Code: " + receiptDetails.authcode + "\r\n";
                                responseAsString += "Auth Timestamp: " + receiptDetails.authtimestamp + "\r\n";
                                responseAsString += "Charge Amount: " + receiptDetails.chargeamount + "\r\n";
                                responseAsString += "Currency: " + receiptDetails.currency + "\r\n";
                                responseAsString += "Merchant Name: " + receiptDetails.merchantname + "\r\n";
                                responseAsString += "Merchant URL: " + receiptDetails.merchanturl + "\r\n";
                                responseAsString += "Supplier Id: " + receiptDetails.supplierid + "\r\n";
                                responseAsString += "Transaction Type: " + receiptDetails.transactiontype + "\r\n";
                            }
                        }
                    }

                    if (true) // Set to true to test request shipment refund
                    {
                        // Create shipment object to contain xml request
                        ShipmentRefundRequestType shipmentRefundRequest = new ShipmentRefundRequestType();
                        shipmentRefundRequest.email = "user@host.com";

                        var shipmentRefundRequestInfo = instance.RequestShipmentRefund(shipmentId, shipmentRefundRequest, out errors);
                        if (shipmentRefundRequestInfo != null)
                        {
                            // Retrieve values from shipmentRefundRequestInfo object
                            responseAsString += "\r\nRefund Service Ticket ID: " + shipmentRefundRequestInfo.serviceticketid + "\r\n\r\n";
                            responseAsString += "Service Ticket Date: " + shipmentRefundRequestInfo.serviceticketdate + "\r\n";
                        }

                    }
                }
            }

            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }
    }
}
