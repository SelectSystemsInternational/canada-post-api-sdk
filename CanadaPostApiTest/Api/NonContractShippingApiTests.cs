/* 
 * Canada Post Api
 *
 * Api SDK Initial build
 *
 * REST XML Spec version: 2022-05-30
 * 
 * Generated by: https://www.selectsystems.com.au/
 */

using System;
using System.IO;

using NUnit.Framework;

using CanadaPostApi.Api;

namespace CanadaPostApi.Test
{
    /// <summary>
    ///  Class for testing CheckoutsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NonContractShippingApiTests
    {
        private AuthorizationApi authorizationApi;
        private NonContractShippingApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            string useragent = "nopCommerce Canada Post Api; .NetStandard 2.1;";

            // Sandbox
            authorizationApi = new AuthorizationApi("https://ct.soa-gw.canadapost.ca", useragent);

            authorizationApi.Configuration.Username = "6e93d53968881714";
            authorizationApi.Configuration.Password = "0bfa9fcb9853d1f51ee57a";
            authorizationApi.Configuration.CustomerNumber = "2004381";
            authorizationApi.Configuration.Account = "2004381";

            var response = authorizationApi.AuthorizationCreateConfiguration();

            instance = new NonContractShippingApi(authorizationApi.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CheckoutsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RatesApi
            Assert.IsInstanceOf(typeof(NonContractShippingApi), instance, "instance is a ShippingApi");
        }

        public (string, string) CreateNonContractShipment()
        {
            string responseAsString = String.Empty;
            string aftifactUrl = String.Empty;

            // Create shipment object to contain xml request
            NonContractShipmentType shipment = new NonContractShipmentType();
            shipment.requestedshippingpoint = "H2B1A0";
            shipment.deliveryspec = new NonContractDeliverySpecType();
            shipment.deliveryspec.sender = new NonContractSenderType();
            shipment.deliveryspec.sender.addressdetails = new NonContractDomesticAddressDetailsType();
            shipment.deliveryspec.destination = new NonContractDestinationType();
            shipment.deliveryspec.destination.addressdetails = new NonContractDestinationAddressDetailsType();
            shipment.deliveryspec.options = new NonContractOptionType[1];
            shipment.deliveryspec.options[0] = new NonContractOptionType();
            shipment.deliveryspec.parcelcharacteristics = new NonContractParcelCharacteristicsType();
            shipment.deliveryspec.parcelcharacteristics.dimensions = new NonContractParcelCharacteristicsTypeDimensions();
            shipment.deliveryspec.notification = new NonContractNotificationType();
            shipment.deliveryspec.preferences = new NonContractPreferencesType();
            shipment.deliveryspec.references = new NonContractReferencesType();

            // Populate shipment object
            shipment.deliveryspec.sender.addressdetails.addressline1 = "502 MAIN ST N";
            shipment.deliveryspec.sender.addressdetails.city = "MONTREAL";
            shipment.deliveryspec.sender.addressdetails.provstate = "QC";
            shipment.deliveryspec.sender.addressdetails.postalzipcode = "H2B1A0";
            shipment.deliveryspec.sender.name = "Bulma";
            shipment.deliveryspec.sender.company = "Capsule Corp.";
            shipment.deliveryspec.sender.contactphone = "1 (514) 820 5879";
            shipment.deliveryspec.destination.addressdetails.addressline1 = "123 Postal Drive";
            shipment.deliveryspec.destination.addressdetails.city = "Ottawa";
            shipment.deliveryspec.destination.addressdetails.provstate = "ON";
            shipment.deliveryspec.destination.addressdetails.countrycode = "CA";
            shipment.deliveryspec.destination.addressdetails.postalzipcode = "K1P5Z9";
            shipment.deliveryspec.destination.name = "John Doe";
            shipment.deliveryspec.destination.company = "ACME Corp.";
            shipment.deliveryspec.options[0].optioncode = "DC";
            shipment.deliveryspec.parcelcharacteristics.dimensions.height = 6;
            shipment.deliveryspec.parcelcharacteristics.dimensions.length = 12;
            shipment.deliveryspec.parcelcharacteristics.dimensions.width = 9;
            shipment.deliveryspec.parcelcharacteristics.weight = 5;
            shipment.deliveryspec.notification.email = "ryuko.saito@kubere.com";
            shipment.deliveryspec.notification.ondelivery = true;
            shipment.deliveryspec.notification.onexception = false;
            shipment.deliveryspec.notification.onshipment = true;
            shipment.deliveryspec.preferences.showinsuredvalue = true;
            shipment.deliveryspec.preferences.showpackinginstructions = true;
            shipment.deliveryspec.preferences.showpostagerate = true;
            shipment.deliveryspec.references.costcentre = "costcentre";
            shipment.deliveryspec.references.customerref1 = "customerref1";
            shipment.deliveryspec.references.customerref2 = "customerref2";
            shipment.deliveryspec.servicecode = "DOM.EP";



            // Retrieve values from shipmentInfo object
            var shipmentInfo = instance.CreateNonContractShipment(shipment, out string errors);
            if (shipmentInfo != null)
            {
                // Retrieve values from shipmentInfo object
                responseAsString += "Shipment ID: " + shipmentInfo.shipmentid + "\r\n";
                foreach (LinkType link in shipmentInfo.links)
                {
                    responseAsString += link.rel + ":  " + link.href + "\r\n";
                    if (link.rel == "label")
                        aftifactUrl = link.href;
                }
            }

            return (shipmentInfo.shipmentid, aftifactUrl);

        }

        /// <summary>
        /// Get shipment aftifact
        /// </summary>
        [Test]
        public void TestShipment()
        {
            string responseAsString = String.Empty;
            string errors = String.Empty;

            (string shipmentId, string aftifactUrl) = CreateNonContractShipment();
            if (!string.IsNullOrEmpty(aftifactUrl))
            {

                // Retrieve values from customer object
                var response = instance.GetShipmentAftifact(aftifactUrl, out errors);
                if (response != null)
                {

                    responseAsString += "HTTP Response Status: " + (int)response.StatusCode + "\r\n\r\n";

                    // Write Artifact to file
                    var mediaStr = response.ContentType;

                    String fileName = "shipmentArtifact.pdf";
                    if (mediaStr.Equals("application/zpl"))
                    {
                        fileName = "shipmentArtifact.zpl";
                    }

                    FileStream fileStream = File.Create(fileName);

                    // Create a 4K buffer to chunk the file  
                    byte[] buffer = new byte[4096];

                    int BytesRead;
                    responseAsString += "Writing response to " + Directory.GetCurrentDirectory() + "\\" + fileName + "\r\n";
                    // Read the chunk of the web response into the buffer
                    while (0 < (BytesRead = response.GetResponseStream().Read(buffer, 0, buffer.Length)))
                    {
                        // Write the chunk from the buffer to the file  
                        fileStream.Write(buffer, 0, BytesRead);
                    }

                    fileStream.Close();
                }

            }

            //string shipmentId = "168171653806964746";

            if (!string.IsNullOrEmpty(shipmentId))
            {
                var shipmentDetails = instance.GetNonContractShipmentDetails(shipmentId, out errors);

                // Retrieve values from NonContractShipmentDetailsType object
                responseAsString += "Tracking Pin: " + shipmentDetails.trackingpin + "\r\n";
                responseAsString += "Service Code: " + shipmentDetails.deliveryspec.servicecode + "\r\n";
                responseAsString += "Sender Postal Code: " + shipmentDetails.deliveryspec.sender.addressdetails.postalzipcode + "\r\n";
                responseAsString += "Destination Postal Code: " + shipmentDetails.deliveryspec.destination.addressdetails.postalzipcode + "\r\n";

                var shipmentPrice = instance.GetShipmentDetailsInformation<ShipmentPriceType>(shipmentId, "price", out errors);

                // Retrieve values from ShipmentPriceType object
                responseAsString += "Service Code: " + shipmentPrice.servicecode + "\r\n";
                responseAsString += "Due amount: " + shipmentPrice.dueamount + "\r\n";

                var shipmentReceipt = instance.GetShipmentDetailsInformation<ShipmentReceiptType>(shipmentId, "receipt", out errors);

                // Retrieve values from ShipmentReceiptType object
                if (shipmentReceipt.Item.GetType() == typeof(ShipmentReceiptTypeCcreceiptdetails))
                {
                    ShipmentReceiptTypeCcreceiptdetails receiptDetails = (ShipmentReceiptTypeCcreceiptdetails)shipmentReceipt.Item;
                    responseAsString += "Auth Code: " + receiptDetails.authcode + "\r\n";
                    responseAsString += "Auth Timestamp: " + receiptDetails.authtimestamp + "\r\n";
                    responseAsString += "Charge Amount: " + receiptDetails.chargeamount + "\r\n";
                    responseAsString += "Currency: " + receiptDetails.currency + "\r\n";
                    responseAsString += "Merchant Name: " + receiptDetails.merchantname + "\r\n";
                    responseAsString += "Merchant URL: " + receiptDetails.merchanturl + "\r\n";
                    responseAsString += "Name on Card: " + receiptDetails.nameoncard + "\r\n";
                    responseAsString += "Card Type: " + receiptDetails.cardtype + "\r\n";
                    responseAsString += "Transaction Type: " + receiptDetails.transactiontype + "\r\n";
                }
                else
                {
                    ShipmentReceiptTypeSupplieraccountreceiptdetails receiptDetails = (ShipmentReceiptTypeSupplieraccountreceiptdetails)shipmentReceipt.Item;
                    responseAsString += "Auth Code: " + receiptDetails.authcode + "\r\n";
                    responseAsString += "Auth Timestamp: " + receiptDetails.authtimestamp + "\r\n";
                    responseAsString += "Charge Amount: " + receiptDetails.chargeamount + "\r\n";
                    responseAsString += "Currency: " + receiptDetails.currency + "\r\n";
                    responseAsString += "Merchant Name: " + receiptDetails.merchantname + "\r\n";
                    responseAsString += "Merchant URL: " + receiptDetails.merchanturl + "\r\n";
                    responseAsString += "Supplier Id: " + receiptDetails.supplierid + "\r\n";
                    responseAsString += "Transaction Type: " + receiptDetails.transactiontype + "\r\n";
                }
            }

            var shipments = instance.GetNonContractShipments("202205290000", "202212010000", out errors);
            if (shipments != null)
            {
                //// Retrieve values from NonContractShipmentsType object
                if (shipments.link != null)
                {
                    foreach (LinkType link in shipments.link)
                    {
                        responseAsString += link.rel + ":  " + link.href + "\r\n";
                    }
                }
                else
                {
                    responseAsString += "No shipments returned.\r\n";
                }
            }

            // Create shipment object to contain xml request
            NonContractShipmentRefundRequestType shipmentRefundRequest = new NonContractShipmentRefundRequestType();
            shipmentRefundRequest.email = "user@host.com";

            var shipmentRefundRequestInfo = instance.RequestNonContractShipmentRefund(shipmentId, shipmentRefundRequest, out errors);
            if (shipmentRefundRequestInfo != null)
            {
                // Retrieve values from shipmentRefundRequestInfo object
                responseAsString += "Service Ticket ID: " + shipmentRefundRequestInfo.serviceticketid + "\r\n";
                responseAsString += "Service Ticket Date: " + shipmentRefundRequestInfo.serviceticketdate + "\r\n";
            }


            Assert.IsInstanceOf(typeof(string), responseAsString, "instance is a string");
        }

    }
}
