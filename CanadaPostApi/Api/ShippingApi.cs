/* 
 * Canada Post Api
 *
 * Api SDK Initial build
 *
 * REST XML Spec version: 2022-05-30
 * 
 * Generated by: https://www.selectsystems.com.au/
 */

using System;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

using CanadaPostApi.Client;

namespace CanadaPostApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShippingApi : IApiAccessor
    {

        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <param name="shipment">shipment</param>
        /// <param name="errors">Errors</param>
        /// <returns>ShipmentInfoType</returns>
        public ShipmentInfoType CreateShipment(ShipmentType shipment, out string errors);

        /// <summary>
        /// Get shipment details
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="errors">Errors</param>
        /// <returns>ShipmentDetailsType</returns>
        public ShipmentDetailsType GetShipmentDetails(string shipmentId, out string errors);

        /// <summary>
        /// Get shipment details information
        /// </summary>
        /// <param name="errors">Errors</param>
        /// <returns>Customer</returns>
        public T GetShipmentDetailsInformation<T>(string shipmentId, string type, out string errors);

        /// <summary>
        /// Get shipment manifests
        /// </summary>
        /// <param name="start">start date</param>
        /// <param name="start">end date</param> 
        /// <param name="errors">Errors</param>
        /// <returns>ManifestsType</returns>
        public ManifestsType GetManifests(string start, string end, out string errors);

        /// <summary>
        /// Get shipment manifest
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="manifestUrl">manifestUrl</param>
        /// <param name="errors">Errors</param>
        /// <returns>ManifestsType</returns>
        public ManifestType GetManifest(string shipmentId, string manifestUrl, out string errors);

        /// <summary>
        /// Request shipment refund
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="request">ShipmentRefundRequestType</param>
        /// <param name="errors">Errors</param>
        /// <returns>ShipmentRefundRequestInfoType</returns>
        public ShipmentRefundRequestInfoType RequestShipmentRefund(string shipmentId, ShipmentRefundRequestType request, out string errors);

        /// <summary>
        /// Void shipment
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="errors">Errors</param>
        /// <returns>messages</returns>
        public HttpWebResponse VoidShipment(string shipmentId, out string errors);

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShippingApi : IShippingApi
    {

        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShippingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = CanadaPostApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShippingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CanadaPostApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <param name="shipment">shipment</param>
        /// <param name="errors">Errors</param>
        /// <returns>ShipmentInfoType</returns>
        public ShipmentInfoType CreateShipment(ShipmentType shipment, out string errors)
        {
            var parameters = new StringBuilder();
            var xmlWriter = XmlWriter.Create(parameters);
            xmlWriter.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"UTF-8\"");
            var serializerRequest = new XmlSerializer(typeof(ShipmentType));
            serializerRequest.Serialize(xmlWriter, shipment);

            var method = WebRequestMethods.Http.Post;
            var acceptType = "application/vnd.cpc.shipment-v8+xml";
            var contentType = "application/vnd.cpc.shipment-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/" + Configuration.ApiClient.Configuration.Account + "/shipment";
            var response = Configuration.ApiClient.Request(parameters.ToString(), method, acceptType, contentType, url, out errors);
            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(ShipmentInfoType));
                    return (ShipmentInfoType)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get shipment details
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="errors">Errors</param>
        /// <returns>ShipmentDetailsType</returns>
        public ShipmentInfoType GetShipment(string shipmentId, out string errors)
        {
            var parameters = new StringBuilder();
            var xmlWriter = XmlWriter.Create(parameters);
            xmlWriter.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"UTF-8\"");
            var serializerRequest = new XmlSerializer(typeof(customer));

            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.shipment-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/" + Configuration.ApiClient.Configuration.Account + "/shipment/" + shipmentId;
            var response = Configuration.ApiClient.Request(parameters.ToString(), method, acceptType, null, url, out errors);
            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(ShipmentInfoType));
                    return (ShipmentInfoType)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get shipment details
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="errors">Errors</param>
        /// <returns>ShipmentDetailsType</returns>
        public ShipmentDetailsType GetShipmentDetails(string shipmentId, out string errors)
        {
            var parameters = new StringBuilder();
            var xmlWriter = XmlWriter.Create(parameters);
            xmlWriter.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"UTF-8\"");
            var serializerRequest = new XmlSerializer(typeof(customer));

            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.shipment-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/" + Configuration.ApiClient.Configuration.Account + "/shipment/" + shipmentId + "/details";
            var response = Configuration.ApiClient.Request(parameters.ToString(), method, acceptType, null, url, out errors);
            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(ShipmentDetailsType));
                    return (ShipmentDetailsType)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get customer information
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="type">infromation type</param>
        /// <param name="errors">Errors</param>
        /// <returns>Generic Type T</returns>
        public T GetShipmentDetailsInformation<T>(string shipmentId, string type, out string errors)
        {
            var parameters = new StringBuilder();
            var xmlWriter = XmlWriter.Create(parameters);
            xmlWriter.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"UTF-8\"");
            var serializerRequest = new XmlSerializer(typeof(customer));

            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.shipment-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/" + Configuration.ApiClient.Configuration.Account + "/shipment/" + shipmentId + "/" + type;
            var response = Configuration.ApiClient.Request(parameters.ToString(), method, acceptType, null, url, out errors);
            if (response == null)
                return default(T);

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    switch (type)
                    {
                        case "price": 
                            var serializerResponse = new XmlSerializer(typeof(ShipmentPriceType));
                            return (T)serializerResponse.Deserialize(streamReader);

                        case "receipt":
                            serializerResponse = new XmlSerializer(typeof(ShipmentReceiptType));
                            return (T)serializerResponse.Deserialize(streamReader);

                        default:
                            return default(T);
                
                    }
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return default(T);
            }
        }

        /// <summary>
        /// Get customer information
        /// </summary>
        /// <param name="errors">Errors</param>
        /// <returns>Customer</returns>
        public HttpWebResponse GetShipmentAftifact(string url, out string errors)
        {
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/pdf,application/zpl";
            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);
            if (response != null)
                return response;

            return null;
        }

        /// <summary>
        /// Get shipment groups
        /// </summary>
        /// <param name="errors">Errors</param>
        /// <returns>GroupsType</returns>
        public GroupsType GetGroups(out string errors)
        {
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.shipment-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/" + Configuration.ApiClient.Configuration.Account + "/group";
            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);
            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(GroupsType));
                    return (GroupsType)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Create a shipment
        /// </summary>
        /// <param name="shipment">shipment</param>
        /// <param name="errors">Errors</param>
        /// <returns>ShipmentInfoType</returns>
        public ManifestsType TransmitShipments(ShipmentTransmitSetType transmit, out string errors)
        {
            var parameters = new StringBuilder();
            var xmlWriter = XmlWriter.Create(parameters);
            xmlWriter.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"UTF-8\"");
            var serializerRequest = new XmlSerializer(typeof(ShipmentTransmitSetType));
            serializerRequest.Serialize(xmlWriter, transmit);

            var method = WebRequestMethods.Http.Post;
            var acceptType = "application/vnd.cpc.manifest-v8+xml";
            var contentType = "application/vnd.cpc.manifest-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/" + Configuration.ApiClient.Configuration.Account + "/manifest";
            var response = Configuration.ApiClient.Request(parameters.ToString(), method, acceptType, contentType, url, out errors);
            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(ManifestsType));
                    return (ManifestsType)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get shipment manifests
        /// </summary>
        /// <param name="start">start date</param>
        /// <param name="start">end date</param> 
        /// <param name="errors">Errors</param>
        /// <returns>ManifestsType</returns>
        public ManifestsType GetManifests(string start, string end, out string errors)
        {
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.manifest-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/" + Configuration.ApiClient.Configuration.Account + "/manifest?start=" + start + "&end=" + end;
            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);
            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(ManifestsType));
                    return (ManifestsType)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get shipment manifest
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="manifestUrl">manifestUrl</param>
        /// <param name="errors">Errors</param>
        /// <returns>ManifestsType</returns>
        public ManifestType GetManifest(string shipmentId, string manifestUrl, out string errors)
        {
            string url;
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.manifest-v8+xml";
            if (manifestUrl == null)
            {
                url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                    "/" + Configuration.ApiClient.Configuration.Account + "/manifest/" + shipmentId;
            }
            else
            {
                url = manifestUrl;
            }

            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);
            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(ManifestType));
                    return (ManifestType)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get customer information
        /// </summary>
        /// <param name="errors">Errors</param>
        /// <returns>Customer</returns>
        public HttpWebResponse GetManifestArtifact(string url, out string errors)
        {
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/pdf,application/zpl";
            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);
            if (response != null)
                return response;

            return null;
        }

        /// <summary>
        /// Request shipment refund
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="request">ShipmentRefundRequestType</param>
        /// <param name="errors">Errors</param>
        /// <returns>ShipmentRefundRequestInfoType</returns>
        public ShipmentRefundRequestInfoType RequestShipmentRefund(string shipmentId, ShipmentRefundRequestType request, out string errors)
        {
            var parameters = new StringBuilder();
            var xmlWriter = XmlWriter.Create(parameters);
            xmlWriter.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"UTF-8\"");
            var serializerRequest = new XmlSerializer(typeof(ShipmentRefundRequestType));
            serializerRequest.Serialize(xmlWriter, request);

            var method = WebRequestMethods.Http.Post;
            var acceptType = "application/vnd.cpc.shipment-v8+xml";
            var contentType = "application/vnd.cpc.shipment-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/shipment/" + shipmentId + "/refund";
            var response = Configuration.ApiClient.Request(parameters.ToString(), method, acceptType, contentType, url, out errors);
            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(ShipmentRefundRequestInfoType));
                    return (ShipmentRefundRequestInfoType)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }


        /// <summary>
        /// Void shipment
        /// </summary>
        /// <param name="shipmentId">shipment identifier</param>
        /// <param name="errors">Errors</param>
        /// <returns>messages</returns>
        public HttpWebResponse VoidShipment(string shipmentId, out string errors)
        {
            var parameters = new StringBuilder();
            var xmlWriter = XmlWriter.Create(parameters);
            xmlWriter.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"UTF-8\"");
            var serializerRequest = new XmlSerializer(typeof(customer));

            var method = "Delete";
            var acceptType = "application/vnd.cpc.shipment-v8+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/rs/" + Configuration.ApiClient.Configuration.CustomerNumber +
                "/" + Configuration.ApiClient.Configuration.Account + "/shipment/" + shipmentId;
            var response = Configuration.ApiClient.Request(parameters.ToString(), method, acceptType, null, url, out errors);

            return response;
        }

    }
}
