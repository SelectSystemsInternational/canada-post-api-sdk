/* 
 * Merchant API
 *
 * Afterpay Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using RestSharp;
using MerchantApi.Client;
using MerchantApi.Model;

namespace MerchantApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IApiAccessor
    {

        /// <summary>
        /// This endpoint performs a payment capture for the full value of the payment plan.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CaptureFull Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public Task<Payment> PaymentFullCaptureAsync(CaptureFull body = null);

        /// <summary>
        /// This endpoint performs a payment capture for the full value of the payment plan.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CaptureFull Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public Task<ApiResponse<Payment>> PaymentFullCaptureWithHttpInfoAsync(CaptureFull body = null);

        /// <summary>
        /// This endpoint requests a payment auth, which determines the order approval status
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Auth Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public Task<Payment> PaymentAuthAsync(Auth body = null);

        /// <summary>
        /// This endpoint requests a payment auth, which determines the order approval status
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Auth Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public Task<ApiResponse<Payment>> PaymentAuthWithHttpInfoAsync(Auth body = null);

        /// <summary>
        /// This endpoint captures a full or partial payment.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">Capture Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public Task<Payment> PaymentCaptureAsync(string id, Capture body = null);

        /// <summary>
        /// This endpoint captures a full or partial payment.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">Capture Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public Task<ApiResponse<Payment>> PaymentCaptureWithHttpInfoAsync(string id, Capture body = null);

        /// <summary>
        /// This endpoint captures a full or partial refund.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">Refund Body, required.</param>
        /// <returns>ApiResponse of Refund</returns>
        public Task<Refund> PaymentRefundAsync(string id, Refund body = null);

        /// <summary>
        /// This endpoint captures a full or partial refund.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">Refund Body, required.</param>
        /// <returns>ApiResponse of Refund</returns>
        public Task<ApiResponse<Refund>> PaymentRefundWithHttpInfoAsync(string id, Refund body = null);

        /// <summary>
        /// Voids a Payment.  
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <returns>ApiResponse of Void</returns>
        public Task<Model.Void> PaymentVoidAsync(string id);

        /// <summary>
        /// Voids a Payment.  
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <returns>ApiResponse of Void</returns>
        public Task<ApiResponse<Model.Void>> PaymentVoidWithHttpInfoAsync(string id);

        /// <summary>
        /// Retrieve a Payment Retrieves a previously created Order by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <returns>Payment</returns>
        public Task<Payment> PaymentGetAsync(string id);

        /// <summary>
        /// Retrieve a Payment Retrieves a previously created Order by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public Task<ApiResponse<Payment>> PaymentGetWithHttpInfoAsync(string id);

        /// <summary>
        /// Retrieve a Payment by Token
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Payment Token, required.</param>
        /// <returns>Payment</returns>
        public Task<Payment> PaymentGetByTokenAsync(string token);

        /// <summary>
        /// Retrieve a Payment by Token
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Payment Token, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public Task<ApiResponse<Payment>> PaymentGetByTokenWithHttpInfoAsync(string token);

        /// <summary>
        /// Updates the Merchant Reference for a previously created payment by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">ShippingCourier Body, required.</param>
        /// <returns>RestResponse</returns>
        public Task<RestResponse> PaymentUpdateShippingCourierAsync(string id, ShippingCourier body = null);

        /// <summary>
        /// Updates the Merchant Reference for a previously created payment by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">ShippingCourier Body, required.</param>
        /// <returns>RestResponse</returns>
        public Task<RestResponse> PaymentUpdateShippingCourierWithHttpInfoAsync(string id, ShippingCourier body = null);

        /// <summary>
        /// Updates the Merchant Reference for a previously created payment by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">MerchantReference Body, required.</param>
        /// <returns>RestResponse</returns>
        public Task<RestResponse> PaymentUpdateMerchantReferenceAsync(string id, MerchantReference body = null);

        /// <summary>
        /// Updates the Merchant Reference for a previously created payment by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">MerchantReference Body, required.</param>
        /// <returns>RestResponse</returns>
        public Task<RestResponse> PaymentUpdateMerchantReferenceWithHttpInfoAsync(string id, MerchantReference body = null);


    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private MerchantApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = MerchantApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MerchantApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.ToString(); //ToDo
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MerchantApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This endpoint performs a payment capture for the full value of the payment plan.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CaptureFull Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public async Task<Payment> PaymentFullCaptureAsync(CaptureFull body = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->PaymentFullCapture");

            ApiResponse<Payment> localVarResponse = await PaymentFullCaptureWithHttpInfoAsync(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint performs a payment capture for the full value of the payment plan.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">CaptureFull Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public async Task<ApiResponse<Payment>> PaymentFullCaptureWithHttpInfoAsync(CaptureFull body = null)
        {
            var localVarPath = GetBasePath() + "payments/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentFullCaptureWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));

        }

        /// <summary>
        /// This endpoint requests a payment auth, which determines the order approval status
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Auth Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public async Task<Payment> PaymentAuthAsync(Auth body = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->PaymentAuth");

            ApiResponse<Payment> localVarResponse = await PaymentAuthWithHttpInfoAsync(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint requests a payment auth, which determines the order approval status
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Auth Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public async Task<ApiResponse<Payment>> PaymentAuthWithHttpInfoAsync(Auth body = null)
        {
            var localVarPath = GetBasePath() + "payments/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentAuthWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));

        }

        /// <summary>
        /// This endpoint captures a full or partial payment.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">Capture Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public async Task<Payment> PaymentCaptureAsync(string id, Capture body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PaymentCapture");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->PaymentCapture");

            ApiResponse<Payment> localVarResponse = await PaymentCaptureWithHttpInfoAsync(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint captures a full or partial payment.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">Capture Body, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public async Task<ApiResponse<Payment>> PaymentCaptureWithHttpInfoAsync(string id, Capture body = null)
        {
            var localVarPath = GetBasePath() + "payments/" + id + "/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
           var localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentCaptureWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));

        }

        /// <summary>
        /// This endpoint captures a full or partial refund.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">Refund Body, required.</param>
        /// <returns>ApiResponse of Refund</returns>
        public async Task<Refund> PaymentRefundAsync(string id, Refund body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PaymentRefund");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->PaymentRefund");

            ApiResponse<Refund> localVarResponse = await PaymentRefundWithHttpInfoAsync(id, body);

            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint captures a full or partial refund.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">Refund Body, required.</param>
        /// <returns>ApiResponse of Refund</returns>
        public async Task<ApiResponse<Refund>> PaymentRefundWithHttpInfoAsync(string id, Refund body = null)
        {
            var localVarPath = GetBasePath() + "payments/" + id + "/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
           var localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentRefundWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Refund>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Refund)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Refund)));

        }

        /// <summary>
        /// Voids a Payment.  
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <returns>ApiResponse of Void</returns>
        public async Task<Model.Void> PaymentVoidAsync(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PaymentVoid");

            ApiResponse<Model.Void> localVarResponse = await PaymentVoidWithHttpInfoAsync(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Voids a Payment.  
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <returns>ApiResponse of Void</returns>
        public async Task<ApiResponse<Model.Void>> PaymentVoidWithHttpInfoAsync(string id)
        {
            var localVarPath = GetBasePath() + "payments/" + id + "/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
           var localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentVoidWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Void>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model.Void)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Void)));

        }

        /// <summary>
        /// Retrieve a Payment Retrieves a previously created Order by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <returns>Payment</returns>
        public async Task<Payment> PaymentGetAsync(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentGet");

            ApiResponse<Payment> localVarResponse = await PaymentGetWithHttpInfoAsync(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Payment Retrieves a previously created Order by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public async Task<ApiResponse<Payment>> PaymentGetWithHttpInfoAsync(string id)
        {
            var localVarPath = GetBasePath() + "payments/" + id.ToString();
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentGetWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
            
        }

        /// <summary>
        /// Retrieve a Payment by Token
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Payment Token, required.</param>
        /// <returns>Payment</returns>
        public async Task<Payment> PaymentGetByTokenAsync(string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling PaymentApi->PaymentGetByToken");

            ApiResponse<Payment> localVarResponse = await PaymentGetByTokenWithHttpInfoAsync(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Payment by Token
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Payment Token, required.</param>
        /// <returns>ApiResponse of Payment</returns>
        public async Task<ApiResponse<Payment>> PaymentGetByTokenWithHttpInfoAsync(string token)
        {
            var localVarPath = GetBasePath() + "payments/token:" + token;
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
           var localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentGetByTokenWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));

        }

        /// <summary>
        /// Updates the Merchant Reference for a previously created payment by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">ShippingCourier Body, required.</param>
        /// <returns>RestResponse</returns>
        public async Task<RestResponse> PaymentUpdateShippingCourierAsync(string id, ShippingCourier body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentUpdateShippingCourier");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentApi->PaymentUpdateShippingCourier");

            var localVarResponse = await PaymentUpdateShippingCourierWithHttpInfoAsync(id, body);
            return localVarResponse;
        }

        /// <summary>
        /// Updates the Merchant Reference for a previously created payment by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">ShippingCourier Body, required.</param>
        /// <returns>RestResponse</returns>
        public async Task<RestResponse> PaymentUpdateShippingCourierWithHttpInfoAsync(string id, ShippingCourier body = null)
        {
            var localVarPath = GetBasePath() + "payments/" + id + "/courier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            RestResponse localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentUpdateShippingCourierWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return localVarResponse;

        }

        /// <summary>
        /// Updates the Merchant Reference for a previously created payment by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">MerchantReference Body, required.</param>
        /// <returns>RestResponse</returns>
        public async Task<RestResponse> PaymentUpdateMerchantReferenceAsync(string id, MerchantReference body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentApi->PaymentUpdateMerchantReference");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentApi->PaymentUpdateMerchantReference");

            var localVarResponse = await PaymentUpdateMerchantReferenceWithHttpInfoAsync(id, body);
            return localVarResponse;
        }

        /// <summary>
        /// Updates the Merchant Reference for a previously created payment by id.
        /// </summary>
        /// <exception cref="MerchantApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id, required.</param>
        /// <param name="body">MerchantReference Body, required.</param>
        /// <returns>RestResponse</returns>
        public async Task<RestResponse> PaymentUpdateMerchantReferenceWithHttpInfoAsync(string id, MerchantReference body = null)
        {
            var localVarPath = GetBasePath() + "payments/" + id;
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = await Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentUpdateMerchantReferenceWithHttpInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return localVarResponse;

        }

    }
}
