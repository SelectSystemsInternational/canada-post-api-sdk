/* 
 * Canada Post Api
 *
 * Api SDK Initial build
 *
 * REST XML Spec version: 2022-05-30
 * 
 * Generated by: https://www.selectsystems.com.au/
 */

using System;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

using CanadaPostApi.Client;

namespace CanadaPostApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackingApi : IApiAccessor
    {

        /// <summary>
        /// Get tracking details
        /// </summary>
        /// <param name="trackingNumber">Tracking number</param>
        /// <param name="errors">Errors</param>
        /// <returns>Tracking details</returns>
        public trackingdetail GetTrackingDetails(string trackingNumber, out string errors);

        /// <summary>
        /// Get tracking details
        /// </summary>
        /// <param name="DestinationPostalCode">destinationPostalCode</param> 
        /// <param name="ReferenceNumber">referenceNumber</param> 
        /// <param name="from">from date string</param>
        /// <param name="to">to date string</param> 
        /// <param name="errors">Errors</param>
        /// <returns>Tracking details</returns>
        public trackingsummary GetTrackingSummary(string destinationPostalCode, string referenceNumber, string from, string to, out string errors);

        /// <summary>
        /// Get tracking details
        /// </summary>
        /// <param name="trackingNumber">Tracking number</param>
        /// <param name="errors">Errors</param>
        /// <returns>Tracking details</returns>
        public deliveryconfirmationcertificate GetDeliveryConfirmationCertificate(string trackingNumber, out string errors);

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrackingApi : ITrackingApi
    {

        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = CanadaPostApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrackingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CanadaPostApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get tracking details
        /// </summary>
        /// <param name="DestinationPostalCode">destinationPostalCode</param> 
        /// <param name="ReferenceNumber">referenceNumber</param> 
        /// <param name="from">from date string</param>
        /// <param name="to">to date string</param> 
        /// <param name="errors">Errors</param>
        /// <returns>Tracking details</returns>
        public trackingsummary GetTrackingSummary(string destinationPostalCode, string referenceNumber, string from, string to, out string errors)
        {
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.track+xml";

            // PIN Summary URI
            //var url = "https://ct.soa-gw.canadapost.ca/vis/track/pin/1681334332936901/summary";
            // DNC Summary URI
            // var url = "https://ct.soa-gw.canadapost.ca/vis/track/dnc/315052413796541/summary";
            // REF Summary URI
            //var url = "https://ct.soa-gw.canadapost.ca/vis/track/ref/summary?mailingDateTo=2022-06-01&destinationPostalCode=K2H7X3&mailingDateFrom=2022-05-01&referenceNumber=DIA101";

            var url = $"{Configuration.ApiClient.Configuration.BasePath}/vis/track/ref/summary?mailingDateTo={to}&mailingDateFrom={from}" +
                $"&destinationPostalCode={destinationPostalCode}&referenceNumber={referenceNumber}";

            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);

            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(trackingsummary));
                    return (trackingsummary)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get tracking details
        /// </summary>
        /// <param name="trackingNumber">Tracking number</param>
        /// <param name="errors">Errors</param>
        /// <returns>Tracking details</returns>
        public trackingdetail GetTrackingDetails(string trackingNumber, out string errors)
        {
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.track+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/vis/track/pin/{trackingNumber}/detail";

            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);

            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(trackingdetail));
                    return (trackingdetail)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get delivery confirmation certificate
        /// </summary>
        /// <param name="trackingNumber">Tracking number</param>
        /// <param name="errors">Errors</param>
        /// <returns>Delivery confirmation certificate</returns>
        public deliveryconfirmationcertificate GetDeliveryConfirmationCertificate(string trackingNumber, out string errors)
        {
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.track+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/vis/certificate/{trackingNumber}/detail";

            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);

            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(deliveryconfirmationcertificate));
                    return (deliveryconfirmationcertificate)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

        /// <summary>
        /// Get delivery confirmation certificate
        /// </summary>
        /// <param name="trackingNumber">Tracking number</param>
        /// <param name="errors">Errors</param>
        /// <returns>Signature image</returns>
        public signatureimage GetSignatureImage(string trackingNumber, out string errors)
        {
            var method = WebRequestMethods.Http.Get;
            var acceptType = "application/vnd.cpc.track+xml";
            var url = $"{Configuration.ApiClient.Configuration.BasePath}/vis/signatureimage/{trackingNumber}/detail";

            var response = Configuration.ApiClient.Request(null, method, acceptType, null, url, out errors);

            if (response == null)
                return null;

            try
            {
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    var serializerResponse = new XmlSerializer(typeof(signatureimage));
                    return (signatureimage)serializerResponse.Deserialize(streamReader);
                }
            }
            catch (ApiException e)
            {
                errors = e.Message;
                return null;
            }
        }

    }
}
